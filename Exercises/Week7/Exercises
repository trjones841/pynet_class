Exercises:

For these exercises, use the Arista switch that is defined in your ~/.eapi.conf file on the lab server.

Note, if you want to manually connect to Arista's eAPI using jsonrpclib, you will need to add the following to your code:

import ssl
ssl._create_default_https_context = ssl._create_unverified_context


This will trust the self-signed Arista SSL certificate.



My solutions to these exercises are posted at:
https://github.com/ktbyers/pynet/tree/master/pyth_ans_ecourse/class7

1. Use Arista's eAPI to obtain 'show interfaces' from the switch. Parse the 'show interfaces' output to obtain the 'inOctets' and 'outOctets' fields for each of the interfaces on the switch.  Accomplish this using Arista's pyeapi.

2. Using Arista's pyeapi, create a script that allows you to add a VLAN (both the VLAN ID and the VLAN name).  

Your script should first check that the VLAN ID is available and only add the VLAN if it doesn't already exist.  Use VLAN IDs between 100 and 999.  You should be able to call the script from the command line as follows:

   python eapi_vlan.py --name blue 100     # add VLAN100, name blue

If you call the script with the --remove option, the VLAN will be removed.

   python eapi_vlan.py --remove 100          # remove VLAN100

Once again only remove the VLAN if it exists on the switch.  You will probably want to use Python's argparse to accomplish the argument processing.

In the lab environment, if you want to directly execute your script, then you will need to use '#!/usr/bin/env python' at the top of the script (instead of '!#/usr/bin/python').


3. Challenge exercise (optional) -- Using Arista's eAPI, write an Ansible module that adds a VLAN (both a VLAN ID and a VLAN name).  Do this in an idempotent manner i.e. only add the VLAN if it doesn't exist; only change the VLAN name if it is not correct. 

To simplify this process, use the .eapi.conf file to store the connection arguments (username, password, host, port, transport).

For additional reference, see here

http://docs.ansible.com/ansible/dev_guide/developing_modules_general.html

The 'Common Module Boilerplate' section is important.


This will probably be fairly challenging. Let me know if you need assistance.
