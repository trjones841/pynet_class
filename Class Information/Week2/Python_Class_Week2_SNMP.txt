Terry

Here is this week's content.
 
Videos:
     The video password is:  Faraday15

       I. telnetlib
          video https://vimeo.com/135398052
          Length is 22 minutes
 
     II. SNMP Intro
         video https://vimeo.com/135393650
         Length is 6 minutes

    III. Installing Python Libraries
         video https://vimeo.com/135401015
         Length is 8 minutes      

   IV. Python SNMP Example
        video https://vimeo.com/135417013
        Length is 16 minutes

    V. Python Library Path
        video https://vimeo.com/135399659
        Length is 10 minutes

Errata (on the videos):

1. In the SNMP Example video, I use an IP address of 50.242.94.227 and the standard SNMP port (UDP 161). This has changed, you will need to use an IP address of 184.105.247.70. For example, you can execute the snmpget as follows:

$ snmpget -Os -c galileo -v 1 184.105.247.70:161 1.3.6.1.2.1.1.1.0
sysDescr.0 = STRING: Cisco IOS Software, C880 Software (C880DATA-UNIVERSALK9-M), Version 15.4(2)T1, RELEASE SOFTWARE (fc3)
Technical Support: http://www.cisco.com/techsupport
Copyright (c) 1986-2014 by Cisco Systems, Inc.
Compiled Thu 26-Jun-14 14:15 by prod_rel_team

2. I stated that you should check the Learning Python videos on functions to understand the if __name__ == "__main__" technique. This is incorrect, I discuss __name__ in the Learning Python video on Modules (Part2)

3. The snmp_helper module is already installed in the lab environment. You do not need to install it.

Lab Environment Network Devices:

The lab environment network devices are shared by all the students so be careful changing these devices. If you want to test configuration changes, then changing the size of the logging buffer is a good action:

logging buffered <some_size>


How to install pip:

Note, pip is already installed in the lab environment, but if you need to install it in some environment, you can:

Download and run this python script (you might need admin/root privileges):

  $ wget https://bootstrap.pypa.io/get-pip.py
  $ python get-pip.py

This pip installation script should also work on Windows.  On Windows you might need to update your PATH so that Windows can find pip.exe (on my Windows machine pip was installed at C:\Python27\Scripts\pip.exe).

In this course we are going to be using the lab environment, but you might also want a local Python environment. Consequently, if you need help getting this setup, let me know.  

Note, in one of the videos I also referenced virtualenv.  For your reference, I was referring to this:

http://docs.python-guide.org/en/latest/dev/virtualenvs/

Installing PySNMP:

Optional - relevant only if trying to install PySNMP in your local environment.

The course's lab environment will already have pysnmp installed. Consequently, no action is required in the lab environment.

Linux
Install pip (see above) and then execute 'pip install pysnmp' (probably need sudo or root privileges).

MacOs
For MacOs you should probably install Homebrew and use Homebrew to install a new version of Python that includes Setuptools and Pip.

The following document provides details on how to do this:

http://docs.python-guide.org/en/latest/starting/install/osx/


Note, you are making meaningful changes to your Mac (if you do this) so proceed with caution.

After this is complete use 'pip install pysnmp' to install PySNMP.


Windows
In order to use PySNMP on Windows, you need to install the PyCrypto library.  One way to do this is to install a precompiled binary (make sure you grab the right binary for your machine):
http://www.voidspace.org.uk/python/modules.shtml#pycrypto

Note, if you are using Windows and 64-bit Python, you might run into an import issue with winrandom and PyCrypto.  If you run into this issue, let me know.

Other content you might be interested in:

Cisco SNMP Object Navigator      (might require Cisco CCO login)

My snmp_helper functions

Exercises:

My solutions to the exercises can be found at:
https://github.com/ktbyers/pynet/tree/master/pyth_ans_ecourse/class2

1. Python Libraries 

    a. Make sure that you have PySNMP and Paramiko installed in the lab (i.e. enter the Python shell and test 'import pysnmp', and 'import paramiko').

    b. Determine which version of PySNMP and Paramiko are installed.  dir(pysnmp) and dir(paramiko) should be helpful here.

    c. Write a simple Python module that contains one function that prints 'hello' (module name = my_func.py). Do a test where you import my_func into a new Python script. Test this using the following contexts:
        * my_func.py is located in the same directory as your script
        * my_func.py is located in some random subdirectory (not the same directory as your script)
        * my_func.py is located in ~/applied_python/lib/python2.7/site-packages/

2. telnetlib

    a. Write a script that connects using telnet to the pynet-rtr1 router. Execute the 'show ip int brief' command on the router and return the output.

Try to do this on your own (i.e. do not copy what I did previously). You should be able to do this by using the following items:

telnetlib.Telnet(ip_addr, TELNET_PORT, TELNET_TIMEOUT)
remote_conn.read_until(<string_pattern>, TELNET_TIMEOUT)
remote_conn.read_very_eager()
remote_conn.write(<command> + '\n')
remote_conn.close()

3. telnetlib (optional - challenge question)

    Convert the code that I wrote here to a class-based solution (i.e. convert over from functions to a class with methods).

4. SNMP Basics

    a. Create an 'SNMP' directory in your home directory.

$ mkdir SNMP
$ cd SNMP 

    b. Verify that you can import the snmp_helper library.  This is a small library that I created to simplify aspects of PySNMP.

$ python
Python 2.7.5 (default, Feb 11 2014, 07:46:25) 
[GCC 4.8.2 20140120 (Red Hat 4.8.2-13)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> import snmp_helper

    c. Create a script that connects to both routers (pynet-rtr1 and pynet-rtr2) and prints out both the MIB2 sysName and sysDescr.

Regards,

Kirk Byers
ktbyers@twb-tech.com 
